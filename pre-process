# Get raw data
library(data.table)
library(ggplot2)
alldata <- fread("ac.csv", na.strings = c("N/A", "-"))
subdata <- alldata[grep("Australia", alldata$Sold_in),]

# Define a function to replace "N/A" only for non-date columns

# Subset with data
data_with_values <- subdata[!is.na(subdata$sri2010_cool) & !is.na(subdata$sri2010_heat),]

# Subset without data
data_without_values <- subdata[is.na(subdata$sri2010_cool) | is.na(subdata$sri2010_heat),]

missing_values_table <- table(is.na(subdata$`Rated AEER`), useNA = "ifany")
# Integrity
# Calculate the percentage of non-missing values for each column
non_missing_percentage <- 100 * colSums(!is.na(data_with_values)) / nrow(data_with_values)
# Consider data valid if over seventy percent
data_delete_miss <- data_with_values[, .SD, .SDcols = which(non_missing_percentage > 70)]
# Extract potentially relevant variables from columns where over seventy percent of the data is valid

columns_to_extract <- c("Registration Number", "C-Dehumid_Rated", "Configuration2", 
                        "C-Sens_Cool_Rated", "C-Total Cool Rated", "H-Power_Inp_Rated", "H-Total Heat Rated", 
                        "EERtestAvg", "COPtestAvg", "AnnualOutputEER", "AnnualOutputCOP", 
                        "Submit_ID", "EER", "Rated cooling power input kW", "Pnoc", "Pnoh",
                        "Rated heating power input kW", "Rated AEER", "Rated ACOP", "sri2010_cool", "sri2010_heat")

# Extract these columns
selected_data <- data_delete_miss[, ..columns_to_extract]

# Replace all 0s with NA in select_data
selected_data[] <- lapply(selected_data, function(x) {
  if (is.numeric(x)) {
    x[x == 0] <- NA
  }
  return(x)
})
selected_data <- selected_data[!(sri2010_cool == 0 & sri2010_heat == 0), ]
# Check missing values
missing_percentage_select <- 100 * colSums(is.na(selected_data)) / nrow(selected_data)
print(missing_percentage_select)

# Plot missing values
missing_data <- data.frame(ColumnName = names(missing_percentage_select), MissingPercentage = missing_percentage_select)

# Bar plot
ggplot(missing_data, aes(x = ColumnName, y = MissingPercentage, fill = MissingPercentage)) +
  geom_bar(stat = "identity") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(x = "Column Name", y = "Percentage of Missing Values (%)", title = "Missing Data Percentage by Column") +
  scale_fill_gradient(low = "blue", high = "red")

# Remove duplicate rows
selected_data <- unique(selected_data, by = "Registration Number")
# Remove submit_id
selected_data[, Submit_ID := NULL]
# Check missing values
missing_percentage_select <- 100 * colSums(is.na(selected_data)) / nrow(selected_data)
print(missing_percentage_select)

# Fill missing values
median_c_dehumid <- median(selected_data$'C-Dehumid_Rated', na.rm = TRUE)
selected_data$'C-Dehumid_Rated'[is.na(selected_data$'C-Dehumid_Rated')] <- median_c_dehumid
print(table(is.na(selected_data$'C-Dehumid_Rated')))

# Histogram
hist(selected_data$'C-Dehumid_Rated', breaks = 20, main = "Histogram of C-Dehumid_Rated", xlab = "C-Dehumid_Rated", col = "blue", border = "black")

selected_data$Configuration2 <- factor(selected_data$Configuration2,
                                       levels = c("Window Wall", "Single Split System"))

selected_data$Configuration2 <- factor(selected_data$Configuration2)

# Convert factor variables to their levels' integer indices
selected_data_numeric <- selected_data
selected_data_numeric[] <- lapply(selected_data, function(x) if (is.factor(x)) as.integer(x) else x)

numeric_data <- selected_data[, sapply(selected_data, is.numeric), with = FALSE]

# Scatterplot matrix
if (ncol(numeric_data) > 1) {
  pairs(numeric_data, panel = panel.smooth)
} else {
  cat("Not enough numeric columns for pairs plot.\n")
}

# Remove the first column
selected_data <- selected_data[, -1, with = FALSE]

# Create a regression model with all variables except 'sri2010_heat'
selected_data.full <- lm(sri2010_cool ~ ., data = selected_data)
selected_data.full <- update(selected_data.full, . ~ . - sri2010_heat)

# Summary of the model
summary(selected_data.full)

# Check for multicollinearity issues among variables
cor_matrix <- cor(selected_data[, c("C-Dehumid_Rated", "C-Sens_Cool_Rated", "EERtestAvg", "AnnualOutputEER", "EER", "Rated AEER")])
print(cor_matrix)
